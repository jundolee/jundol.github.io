{"version":3,"file":"component---src-templates-blog-post-js-1ee311051643b4ec4ec6.js","mappings":"uJA2CA,IAjCY,KAAO,IAAD,EAChB,MAiBMA,EAA+B,QAAzB,GAjBCC,EAAAA,EAAAA,gBAAe,cAiBRC,KAAKC,oBAAY,aAAtB,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,QACZJ,aAAM,EAANA,EAAQK,OACP,0BACGL,aAAM,EAANA,EAAQM,UAAW,KAAI,KAKxB,C,+CChBV,IApBe,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,SAC5B,IAAIC,EACF,sBAAIR,UAAU,gBACZ,gBAAC,EAAAS,KAAI,CAACC,GAAG,KAAKN,IAIlB,OACE,uBAAKJ,UAAU,iBAAiB,oBAAmBM,GACjD,0BAAQN,UAAU,iBAAiBQ,GACnC,4BAAOH,GACP,8BACE,qBAAGM,KAAK,8BAA6B,QAEnC,C,+CC8BV,IAvCY,IAAuC,IAAD,UAArC,YAAEC,EAAW,MAAER,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEP,IAASD,EAAAA,EAAAA,gBAAe,cAgB1BgB,EAAkBD,GAAed,EAAKC,aAAaa,YACnDE,EAAgC,QAApB,EAAGhB,EAAKC,oBAAY,aAAjB,EAAmBK,MAExC,OACE,gCACE,6BAAQU,EAAkBV,EAAK,MAAMU,EAAiBV,GACtD,wBAAMH,KAAK,cAAcc,QAASF,IAClC,wBAAMG,SAAS,WAAWD,QAASX,IACnC,wBAAMY,SAAS,iBAAiBD,QAASF,IACzC,wBAAMG,SAAS,UAAUD,QAAQ,YACjC,wBAAMd,KAAK,eAAec,QAAQ,YAClC,wBACEd,KAAK,kBACLc,SAA0B,QAAjB,EAAAjB,EAAKC,oBAAY,OAAQ,QAAR,EAAjB,EAAmBkB,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMjB,KAAK,gBAAgBc,QAASX,IACpC,wBAAMH,KAAK,sBAAsBc,QAASF,IACzCR,EACA,C,uHCtCP,MA2Dac,EAAO,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFlB,MAAOkB,EAAKC,YAAYnB,MACxBQ,YAAaU,EAAKC,YAAYX,aAAeU,EAAKE,SAClD,EAIN,UApEyB,IAGlB,IAAD,MAFJJ,MAAM,SAAEK,EAAQ,KAAEC,EAAI,KAAE5B,EAAMuB,eAAgBC,GAAM,SACpDnB,GACD,EACC,MAAMwB,GAA6B,QAAjB,EAAA7B,EAAKC,oBAAY,aAAjB,EAAmBK,QAAK,QAE1C,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAOuB,GACjC,2BACE3B,UAAU,YACV4B,WAAS,EACTC,SAAS,6BAET,uBAAK7B,UAAU,UACb,8BACE,sBAAI8B,SAAS,YAAYR,EAAKC,YAAYnB,SAG9C,qBAAGJ,UAAU,kBAAkBsB,EAAKC,YAAYQ,MAChD,2BACEC,wBAAyB,CAAEC,OAAQX,EAAKY,MACxCJ,SAAS,gBAEX,4BAGF,uBAAK9B,UAAU,iBACb,sBACEmC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGf,GACC,gBAAC,EAAAhB,KAAI,CAACC,GAAIe,EAASgB,OAAOC,KAAMC,IAAI,QAAO,KACtClB,EAASF,YAAYnB,QAI9B,0BACGsB,GACC,gBAAC,EAAAjB,KAAI,CAACC,GAAIgB,EAAKe,OAAOC,KAAMC,IAAI,QAC7BjB,EAAKH,YAAYnB,MAAM,SAMlC,uBAAKJ,UAAU,iBACb,gBAAC,IAAG,OAEC,C","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      {author?.name && (\n        <p>\n          {author?.summary || null}\n          {` `}\n\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header = (\n    <h1 className=\"main-heading\">\n      <Link to=\"/\">{title}</Link>\n    </h1>\n  ) \n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        <a href=\"https://jundolee.github.io\">jun</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst BlogPostTemplate = ({\r\n  data: { previous, next, site, markdownRemark: post },\r\n  location,\r\n}) => {\r\n  const siteTitle = site.siteMetadata?.title || `Title`\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <article\r\n        className=\"blog-post\"\r\n        itemScope\r\n        itemType=\"http://schema.org/Article\"\r\n      >\r\n        <div className=\"sticky\">\r\n          <header>\r\n            <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\r\n          </header>\r\n        </div>\r\n        <p className=\"blog-post-date\">{post.frontmatter.date}</p>\r\n        <section\r\n          dangerouslySetInnerHTML={{ __html: post.html }}\r\n          itemProp=\"articleBody\"\r\n        />\r\n        <hr />\r\n        \r\n      </article>\r\n      <nav className=\"blog-post-nav\">\r\n        <ul\r\n          style={{\r\n            display: `flex`,\r\n            flexWrap: `wrap`,\r\n            justifyContent: `space-between`,\r\n            listStyle: `none`,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.fields.slug} rel=\"prev\">\r\n                ← {previous.frontmatter.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.fields.slug} rel=\"next\">\r\n                {next.frontmatter.title} →\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className=\"blog-post-bio\">\r\n        <Bio />\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = ({ data: { markdownRemark: post } }) => {\r\n  return (\r\n    <Seo\r\n      title={post.frontmatter.title}\r\n      description={post.frontmatter.description || post.excerpt}\r\n    />\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n  ) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"YYYY-MM-DD\")\r\n        description\r\n        category\r\n      }\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["author","useStaticQuery","site","siteMetadata","className","name","summary","location","title","children","isRootPath","pathname","header","Link","to","href","description","metaDescription","defaultTitle","content","property","social","twitter","Head","data","markdownRemark","post","frontmatter","excerpt","previous","next","siteTitle","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}